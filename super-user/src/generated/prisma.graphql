# source: https://eu1.prisma.sh/public-forkbell-321/mirage-advanced/dev
# timestamp: Fri Oct 12 2018 09:44:29 GMT+0200 (SAST)

type _Produce {
  name: String!
  type: CropCategory!
  spacing: Int
  plantsPerM: Float
  group: _ProduceTable!
}

"""A connection to a list of items."""
type _ProduceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [_ProduceEdge]!
  aggregate: Aggregate_Produce!
}

input _ProduceCreateInput {
  name: String!
  type: CropCategory!
  spacing: Int
  plantsPerM: Float
  group: _ProduceTableCreateOneWithoutProduceInput!
}

input _ProduceCreateManyWithoutGroupInput {
  create: [_ProduceCreateWithoutGroupInput!]
  connect: [_ProduceWhereUniqueInput!]
}

input _ProduceCreateWithoutGroupInput {
  name: String!
  type: CropCategory!
  spacing: Int
  plantsPerM: Float
}

"""An edge in a connection."""
type _ProduceEdge {
  """The item at the end of the edge."""
  node: _Produce!

  """A cursor for use in pagination."""
  cursor: String!
}

enum _ProduceOrderByInput {
  name_ASC
  name_DESC
  type_ASC
  type_DESC
  spacing_ASC
  spacing_DESC
  plantsPerM_ASC
  plantsPerM_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type _ProducePreviousValues {
  name: String!
  type: CropCategory!
  spacing: Int
  plantsPerM: Float
}

type _ProduceSubscriptionPayload {
  mutation: MutationType!
  node: _Produce
  updatedFields: [String!]
  previousValues: _ProducePreviousValues
}

input _ProduceSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [_ProduceSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [_ProduceSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [_ProduceSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: _ProduceWhereInput
}

type _ProduceTable {
  name: String
  produce(where: _ProduceWhereInput, orderBy: _ProduceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [_Produce!]
}

"""A connection to a list of items."""
type _ProduceTableConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [_ProduceTableEdge]!
  aggregate: Aggregate_ProduceTable!
}

input _ProduceTableCreateInput {
  name: String
  produce: _ProduceCreateManyWithoutGroupInput
}

input _ProduceTableCreateOneWithoutProduceInput {
  create: _ProduceTableCreateWithoutProduceInput
}

input _ProduceTableCreateWithoutProduceInput {
  name: String
}

"""An edge in a connection."""
type _ProduceTableEdge {
  """The item at the end of the edge."""
  node: _ProduceTable!

  """A cursor for use in pagination."""
  cursor: String!
}

enum _ProduceTableOrderByInput {
  name_ASC
  name_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type _ProduceTablePreviousValues {
  name: String
}

type _ProduceTableSubscriptionPayload {
  mutation: MutationType!
  node: _ProduceTable
  updatedFields: [String!]
  previousValues: _ProduceTablePreviousValues
}

input _ProduceTableSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [_ProduceTableSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [_ProduceTableSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [_ProduceTableSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: _ProduceTableWhereInput
}

input _ProduceTableUpdateInput {
  name: String
  produce: _ProduceUpdateManyWithoutGroupInput
}

input _ProduceTableUpdateOneRequiredWithoutProduceInput {
  create: _ProduceTableCreateWithoutProduceInput
  update: _ProduceTableUpdateWithoutProduceDataInput
  upsert: _ProduceTableUpsertWithoutProduceInput
}

input _ProduceTableUpdateWithoutProduceDataInput {
  name: String
}

input _ProduceTableUpsertWithoutProduceInput {
  update: _ProduceTableUpdateWithoutProduceDataInput!
  create: _ProduceTableCreateWithoutProduceInput!
}

input _ProduceTableWhereInput {
  """Logical AND on all given filters."""
  AND: [_ProduceTableWhereInput!]

  """Logical OR on all given filters."""
  OR: [_ProduceTableWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [_ProduceTableWhereInput!]
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  produce_every: _ProduceWhereInput
  produce_some: _ProduceWhereInput
  produce_none: _ProduceWhereInput
}

input _ProduceUpdateInput {
  name: String
  type: CropCategory
  spacing: Int
  plantsPerM: Float
  group: _ProduceTableUpdateOneRequiredWithoutProduceInput
}

input _ProduceUpdateManyWithoutGroupInput {
  create: [_ProduceCreateWithoutGroupInput!]
  connect: [_ProduceWhereUniqueInput!]
  disconnect: [_ProduceWhereUniqueInput!]
  delete: [_ProduceWhereUniqueInput!]
  update: [_ProduceUpdateWithWhereUniqueWithoutGroupInput!]
  upsert: [_ProduceUpsertWithWhereUniqueWithoutGroupInput!]
}

input _ProduceUpdateWithoutGroupDataInput {
  name: String
  type: CropCategory
  spacing: Int
  plantsPerM: Float
}

input _ProduceUpdateWithWhereUniqueWithoutGroupInput {
  where: _ProduceWhereUniqueInput!
  data: _ProduceUpdateWithoutGroupDataInput!
}

input _ProduceUpsertWithWhereUniqueWithoutGroupInput {
  where: _ProduceWhereUniqueInput!
  update: _ProduceUpdateWithoutGroupDataInput!
  create: _ProduceCreateWithoutGroupInput!
}

input _ProduceWhereInput {
  """Logical AND on all given filters."""
  AND: [_ProduceWhereInput!]

  """Logical OR on all given filters."""
  OR: [_ProduceWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [_ProduceWhereInput!]
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  type: CropCategory

  """All values that are not equal to given value."""
  type_not: CropCategory

  """All values that are contained in given list."""
  type_in: [CropCategory!]

  """All values that are not contained in given list."""
  type_not_in: [CropCategory!]
  spacing: Int

  """All values that are not equal to given value."""
  spacing_not: Int

  """All values that are contained in given list."""
  spacing_in: [Int!]

  """All values that are not contained in given list."""
  spacing_not_in: [Int!]

  """All values less than the given value."""
  spacing_lt: Int

  """All values less than or equal the given value."""
  spacing_lte: Int

  """All values greater than the given value."""
  spacing_gt: Int

  """All values greater than or equal the given value."""
  spacing_gte: Int
  plantsPerM: Float

  """All values that are not equal to given value."""
  plantsPerM_not: Float

  """All values that are contained in given list."""
  plantsPerM_in: [Float!]

  """All values that are not contained in given list."""
  plantsPerM_not_in: [Float!]

  """All values less than the given value."""
  plantsPerM_lt: Float

  """All values less than or equal the given value."""
  plantsPerM_lte: Float

  """All values greater than the given value."""
  plantsPerM_gt: Float

  """All values greater than or equal the given value."""
  plantsPerM_gte: Float
  group: _ProduceTableWhereInput
}

input _ProduceWhereUniqueInput {
  name: String
}

type Address {
  line1: String
  line2: String
  line3: String
  area: String
  postalCode: String
  province: String
  resident: User!
}

"""A connection to a list of items."""
type AddressConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AddressEdge]!
  aggregate: AggregateAddress!
}

input AddressCreateInput {
  line1: String
  line2: String
  line3: String
  area: String
  postalCode: String
  province: String
  resident: UserCreateOneWithoutAddressInput!
}

input AddressCreateOneWithoutResidentInput {
  create: AddressCreateWithoutResidentInput
}

input AddressCreateWithoutResidentInput {
  line1: String
  line2: String
  line3: String
  area: String
  postalCode: String
  province: String
}

"""An edge in a connection."""
type AddressEdge {
  """The item at the end of the edge."""
  node: Address!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AddressOrderByInput {
  line1_ASC
  line1_DESC
  line2_ASC
  line2_DESC
  line3_ASC
  line3_DESC
  area_ASC
  area_DESC
  postalCode_ASC
  postalCode_DESC
  province_ASC
  province_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type AddressPreviousValues {
  line1: String
  line2: String
  line3: String
  area: String
  postalCode: String
  province: String
}

type AddressSubscriptionPayload {
  mutation: MutationType!
  node: Address
  updatedFields: [String!]
  previousValues: AddressPreviousValues
}

input AddressSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AddressSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AddressSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AddressSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AddressWhereInput
}

input AddressUpdateInput {
  line1: String
  line2: String
  line3: String
  area: String
  postalCode: String
  province: String
  resident: UserUpdateOneRequiredWithoutAddressInput
}

input AddressUpdateOneWithoutResidentInput {
  create: AddressCreateWithoutResidentInput
  disconnect: Boolean
  delete: Boolean
  update: AddressUpdateWithoutResidentDataInput
  upsert: AddressUpsertWithoutResidentInput
}

input AddressUpdateWithoutResidentDataInput {
  line1: String
  line2: String
  line3: String
  area: String
  postalCode: String
  province: String
}

input AddressUpsertWithoutResidentInput {
  update: AddressUpdateWithoutResidentDataInput!
  create: AddressCreateWithoutResidentInput!
}

input AddressWhereInput {
  """Logical AND on all given filters."""
  AND: [AddressWhereInput!]

  """Logical OR on all given filters."""
  OR: [AddressWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AddressWhereInput!]
  line1: String

  """All values that are not equal to given value."""
  line1_not: String

  """All values that are contained in given list."""
  line1_in: [String!]

  """All values that are not contained in given list."""
  line1_not_in: [String!]

  """All values less than the given value."""
  line1_lt: String

  """All values less than or equal the given value."""
  line1_lte: String

  """All values greater than the given value."""
  line1_gt: String

  """All values greater than or equal the given value."""
  line1_gte: String

  """All values containing the given string."""
  line1_contains: String

  """All values not containing the given string."""
  line1_not_contains: String

  """All values starting with the given string."""
  line1_starts_with: String

  """All values not starting with the given string."""
  line1_not_starts_with: String

  """All values ending with the given string."""
  line1_ends_with: String

  """All values not ending with the given string."""
  line1_not_ends_with: String
  line2: String

  """All values that are not equal to given value."""
  line2_not: String

  """All values that are contained in given list."""
  line2_in: [String!]

  """All values that are not contained in given list."""
  line2_not_in: [String!]

  """All values less than the given value."""
  line2_lt: String

  """All values less than or equal the given value."""
  line2_lte: String

  """All values greater than the given value."""
  line2_gt: String

  """All values greater than or equal the given value."""
  line2_gte: String

  """All values containing the given string."""
  line2_contains: String

  """All values not containing the given string."""
  line2_not_contains: String

  """All values starting with the given string."""
  line2_starts_with: String

  """All values not starting with the given string."""
  line2_not_starts_with: String

  """All values ending with the given string."""
  line2_ends_with: String

  """All values not ending with the given string."""
  line2_not_ends_with: String
  line3: String

  """All values that are not equal to given value."""
  line3_not: String

  """All values that are contained in given list."""
  line3_in: [String!]

  """All values that are not contained in given list."""
  line3_not_in: [String!]

  """All values less than the given value."""
  line3_lt: String

  """All values less than or equal the given value."""
  line3_lte: String

  """All values greater than the given value."""
  line3_gt: String

  """All values greater than or equal the given value."""
  line3_gte: String

  """All values containing the given string."""
  line3_contains: String

  """All values not containing the given string."""
  line3_not_contains: String

  """All values starting with the given string."""
  line3_starts_with: String

  """All values not starting with the given string."""
  line3_not_starts_with: String

  """All values ending with the given string."""
  line3_ends_with: String

  """All values not ending with the given string."""
  line3_not_ends_with: String
  area: String

  """All values that are not equal to given value."""
  area_not: String

  """All values that are contained in given list."""
  area_in: [String!]

  """All values that are not contained in given list."""
  area_not_in: [String!]

  """All values less than the given value."""
  area_lt: String

  """All values less than or equal the given value."""
  area_lte: String

  """All values greater than the given value."""
  area_gt: String

  """All values greater than or equal the given value."""
  area_gte: String

  """All values containing the given string."""
  area_contains: String

  """All values not containing the given string."""
  area_not_contains: String

  """All values starting with the given string."""
  area_starts_with: String

  """All values not starting with the given string."""
  area_not_starts_with: String

  """All values ending with the given string."""
  area_ends_with: String

  """All values not ending with the given string."""
  area_not_ends_with: String
  postalCode: String

  """All values that are not equal to given value."""
  postalCode_not: String

  """All values that are contained in given list."""
  postalCode_in: [String!]

  """All values that are not contained in given list."""
  postalCode_not_in: [String!]

  """All values less than the given value."""
  postalCode_lt: String

  """All values less than or equal the given value."""
  postalCode_lte: String

  """All values greater than the given value."""
  postalCode_gt: String

  """All values greater than or equal the given value."""
  postalCode_gte: String

  """All values containing the given string."""
  postalCode_contains: String

  """All values not containing the given string."""
  postalCode_not_contains: String

  """All values starting with the given string."""
  postalCode_starts_with: String

  """All values not starting with the given string."""
  postalCode_not_starts_with: String

  """All values ending with the given string."""
  postalCode_ends_with: String

  """All values not ending with the given string."""
  postalCode_not_ends_with: String
  province: String

  """All values that are not equal to given value."""
  province_not: String

  """All values that are contained in given list."""
  province_in: [String!]

  """All values that are not contained in given list."""
  province_not_in: [String!]

  """All values less than the given value."""
  province_lt: String

  """All values less than or equal the given value."""
  province_lte: String

  """All values greater than the given value."""
  province_gt: String

  """All values greater than or equal the given value."""
  province_gte: String

  """All values containing the given string."""
  province_contains: String

  """All values not containing the given string."""
  province_not_contains: String

  """All values starting with the given string."""
  province_starts_with: String

  """All values not starting with the given string."""
  province_not_starts_with: String

  """All values ending with the given string."""
  province_ends_with: String

  """All values not ending with the given string."""
  province_not_ends_with: String
  resident: UserWhereInput
}

type Aggregate_Produce {
  count: Int!
}

type Aggregate_ProduceTable {
  count: Int!
}

type AggregateAddress {
  count: Int!
}

type AggregateCrop {
  count: Int!
}

type AggregateFarm {
  count: Int!
}

type AggregateFarmingActivities {
  count: Int!
}

type AggregateHarvestWindow {
  count: Int!
}

type AggregateLocation {
  count: Int!
}

type AggregatePersonalDetails {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Crop {
  category: CropCategory!
  description: String!
  harvestWindow: HarvestWindow!
}

enum CropCategory {
  VEGETABLE
  FRUIT
  HERB
}

"""A connection to a list of items."""
type CropConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CropEdge]!
  aggregate: AggregateCrop!
}

input CropCreateInput {
  category: CropCategory!
  description: String!
  harvestWindow: HarvestWindowCreateOneInput!
}

"""An edge in a connection."""
type CropEdge {
  """The item at the end of the edge."""
  node: Crop!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CropOrderByInput {
  category_ASC
  category_DESC
  description_ASC
  description_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CropPreviousValues {
  category: CropCategory!
  description: String!
}

type CropSubscriptionPayload {
  mutation: MutationType!
  node: Crop
  updatedFields: [String!]
  previousValues: CropPreviousValues
}

input CropSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CropSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CropSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CropSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CropWhereInput
}

input CropUpdateInput {
  category: CropCategory
  description: String
  harvestWindow: HarvestWindowUpdateOneRequiredInput
}

input CropWhereInput {
  """Logical AND on all given filters."""
  AND: [CropWhereInput!]

  """Logical OR on all given filters."""
  OR: [CropWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CropWhereInput!]
  category: CropCategory

  """All values that are not equal to given value."""
  category_not: CropCategory

  """All values that are contained in given list."""
  category_in: [CropCategory!]

  """All values that are not contained in given list."""
  category_not_in: [CropCategory!]
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  harvestWindow: HarvestWindowWhereInput
}

scalar DateTime

type Farm {
  totalLand: Int!
  cultivatedLand: Int!
  shareLocation: Boolean!
  gpsPoints: Location!
  farmersAssociations: String
}

"""A connection to a list of items."""
type FarmConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FarmEdge]!
  aggregate: AggregateFarm!
}

input FarmCreateInput {
  totalLand: Int!
  cultivatedLand: Int!
  shareLocation: Boolean!
  farmersAssociations: String
  gpsPoints: LocationCreateOneInput!
}

"""An edge in a connection."""
type FarmEdge {
  """The item at the end of the edge."""
  node: Farm!

  """A cursor for use in pagination."""
  cursor: String!
}

type FarmingActivities {
  category: String!
  shortDescription: String
  cultivationApproach: String
  farmer: User!
}

"""A connection to a list of items."""
type FarmingActivitiesConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FarmingActivitiesEdge]!
  aggregate: AggregateFarmingActivities!
}

input FarmingActivitiesCreateInput {
  category: String!
  shortDescription: String
  cultivationApproach: String
  farmer: UserCreateOneWithoutFarmingActivitiesInput!
}

input FarmingActivitiesCreateOneWithoutFarmerInput {
  create: FarmingActivitiesCreateWithoutFarmerInput
}

input FarmingActivitiesCreateWithoutFarmerInput {
  category: String!
  shortDescription: String
  cultivationApproach: String
}

"""An edge in a connection."""
type FarmingActivitiesEdge {
  """The item at the end of the edge."""
  node: FarmingActivities!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FarmingActivitiesOrderByInput {
  category_ASC
  category_DESC
  shortDescription_ASC
  shortDescription_DESC
  cultivationApproach_ASC
  cultivationApproach_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type FarmingActivitiesPreviousValues {
  category: String!
  shortDescription: String
  cultivationApproach: String
}

type FarmingActivitiesSubscriptionPayload {
  mutation: MutationType!
  node: FarmingActivities
  updatedFields: [String!]
  previousValues: FarmingActivitiesPreviousValues
}

input FarmingActivitiesSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FarmingActivitiesSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FarmingActivitiesSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FarmingActivitiesSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FarmingActivitiesWhereInput
}

input FarmingActivitiesUpdateInput {
  category: String
  shortDescription: String
  cultivationApproach: String
  farmer: UserUpdateOneRequiredWithoutFarmingActivitiesInput
}

input FarmingActivitiesUpdateOneWithoutFarmerInput {
  create: FarmingActivitiesCreateWithoutFarmerInput
  disconnect: Boolean
  delete: Boolean
  update: FarmingActivitiesUpdateWithoutFarmerDataInput
  upsert: FarmingActivitiesUpsertWithoutFarmerInput
}

input FarmingActivitiesUpdateWithoutFarmerDataInput {
  category: String
  shortDescription: String
  cultivationApproach: String
}

input FarmingActivitiesUpsertWithoutFarmerInput {
  update: FarmingActivitiesUpdateWithoutFarmerDataInput!
  create: FarmingActivitiesCreateWithoutFarmerInput!
}

input FarmingActivitiesWhereInput {
  """Logical AND on all given filters."""
  AND: [FarmingActivitiesWhereInput!]

  """Logical OR on all given filters."""
  OR: [FarmingActivitiesWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FarmingActivitiesWhereInput!]
  category: String

  """All values that are not equal to given value."""
  category_not: String

  """All values that are contained in given list."""
  category_in: [String!]

  """All values that are not contained in given list."""
  category_not_in: [String!]

  """All values less than the given value."""
  category_lt: String

  """All values less than or equal the given value."""
  category_lte: String

  """All values greater than the given value."""
  category_gt: String

  """All values greater than or equal the given value."""
  category_gte: String

  """All values containing the given string."""
  category_contains: String

  """All values not containing the given string."""
  category_not_contains: String

  """All values starting with the given string."""
  category_starts_with: String

  """All values not starting with the given string."""
  category_not_starts_with: String

  """All values ending with the given string."""
  category_ends_with: String

  """All values not ending with the given string."""
  category_not_ends_with: String
  shortDescription: String

  """All values that are not equal to given value."""
  shortDescription_not: String

  """All values that are contained in given list."""
  shortDescription_in: [String!]

  """All values that are not contained in given list."""
  shortDescription_not_in: [String!]

  """All values less than the given value."""
  shortDescription_lt: String

  """All values less than or equal the given value."""
  shortDescription_lte: String

  """All values greater than the given value."""
  shortDescription_gt: String

  """All values greater than or equal the given value."""
  shortDescription_gte: String

  """All values containing the given string."""
  shortDescription_contains: String

  """All values not containing the given string."""
  shortDescription_not_contains: String

  """All values starting with the given string."""
  shortDescription_starts_with: String

  """All values not starting with the given string."""
  shortDescription_not_starts_with: String

  """All values ending with the given string."""
  shortDescription_ends_with: String

  """All values not ending with the given string."""
  shortDescription_not_ends_with: String
  cultivationApproach: String

  """All values that are not equal to given value."""
  cultivationApproach_not: String

  """All values that are contained in given list."""
  cultivationApproach_in: [String!]

  """All values that are not contained in given list."""
  cultivationApproach_not_in: [String!]

  """All values less than the given value."""
  cultivationApproach_lt: String

  """All values less than or equal the given value."""
  cultivationApproach_lte: String

  """All values greater than the given value."""
  cultivationApproach_gt: String

  """All values greater than or equal the given value."""
  cultivationApproach_gte: String

  """All values containing the given string."""
  cultivationApproach_contains: String

  """All values not containing the given string."""
  cultivationApproach_not_contains: String

  """All values starting with the given string."""
  cultivationApproach_starts_with: String

  """All values not starting with the given string."""
  cultivationApproach_not_starts_with: String

  """All values ending with the given string."""
  cultivationApproach_ends_with: String

  """All values not ending with the given string."""
  cultivationApproach_not_ends_with: String
  farmer: UserWhereInput
}

enum FarmOrderByInput {
  totalLand_ASC
  totalLand_DESC
  cultivatedLand_ASC
  cultivatedLand_DESC
  shareLocation_ASC
  shareLocation_DESC
  farmersAssociations_ASC
  farmersAssociations_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type FarmPreviousValues {
  totalLand: Int!
  cultivatedLand: Int!
  shareLocation: Boolean!
  farmersAssociations: String
}

type FarmSubscriptionPayload {
  mutation: MutationType!
  node: Farm
  updatedFields: [String!]
  previousValues: FarmPreviousValues
}

input FarmSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FarmSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FarmSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FarmSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FarmWhereInput
}

input FarmUpdateInput {
  totalLand: Int
  cultivatedLand: Int
  shareLocation: Boolean
  farmersAssociations: String
  gpsPoints: LocationUpdateOneRequiredInput
}

input FarmWhereInput {
  """Logical AND on all given filters."""
  AND: [FarmWhereInput!]

  """Logical OR on all given filters."""
  OR: [FarmWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FarmWhereInput!]
  totalLand: Int

  """All values that are not equal to given value."""
  totalLand_not: Int

  """All values that are contained in given list."""
  totalLand_in: [Int!]

  """All values that are not contained in given list."""
  totalLand_not_in: [Int!]

  """All values less than the given value."""
  totalLand_lt: Int

  """All values less than or equal the given value."""
  totalLand_lte: Int

  """All values greater than the given value."""
  totalLand_gt: Int

  """All values greater than or equal the given value."""
  totalLand_gte: Int
  cultivatedLand: Int

  """All values that are not equal to given value."""
  cultivatedLand_not: Int

  """All values that are contained in given list."""
  cultivatedLand_in: [Int!]

  """All values that are not contained in given list."""
  cultivatedLand_not_in: [Int!]

  """All values less than the given value."""
  cultivatedLand_lt: Int

  """All values less than or equal the given value."""
  cultivatedLand_lte: Int

  """All values greater than the given value."""
  cultivatedLand_gt: Int

  """All values greater than or equal the given value."""
  cultivatedLand_gte: Int
  shareLocation: Boolean

  """All values that are not equal to given value."""
  shareLocation_not: Boolean
  farmersAssociations: String

  """All values that are not equal to given value."""
  farmersAssociations_not: String

  """All values that are contained in given list."""
  farmersAssociations_in: [String!]

  """All values that are not contained in given list."""
  farmersAssociations_not_in: [String!]

  """All values less than the given value."""
  farmersAssociations_lt: String

  """All values less than or equal the given value."""
  farmersAssociations_lte: String

  """All values greater than the given value."""
  farmersAssociations_gt: String

  """All values greater than or equal the given value."""
  farmersAssociations_gte: String

  """All values containing the given string."""
  farmersAssociations_contains: String

  """All values not containing the given string."""
  farmersAssociations_not_contains: String

  """All values starting with the given string."""
  farmersAssociations_starts_with: String

  """All values not starting with the given string."""
  farmersAssociations_not_starts_with: String

  """All values ending with the given string."""
  farmersAssociations_ends_with: String

  """All values not ending with the given string."""
  farmersAssociations_not_ends_with: String
  gpsPoints: LocationWhereInput
}

type HarvestWindow {
  from: DateTime!
  to: DateTime!
}

"""A connection to a list of items."""
type HarvestWindowConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [HarvestWindowEdge]!
  aggregate: AggregateHarvestWindow!
}

input HarvestWindowCreateInput {
  from: DateTime!
  to: DateTime!
}

input HarvestWindowCreateOneInput {
  create: HarvestWindowCreateInput
}

"""An edge in a connection."""
type HarvestWindowEdge {
  """The item at the end of the edge."""
  node: HarvestWindow!

  """A cursor for use in pagination."""
  cursor: String!
}

enum HarvestWindowOrderByInput {
  from_ASC
  from_DESC
  to_ASC
  to_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type HarvestWindowPreviousValues {
  from: DateTime!
  to: DateTime!
}

type HarvestWindowSubscriptionPayload {
  mutation: MutationType!
  node: HarvestWindow
  updatedFields: [String!]
  previousValues: HarvestWindowPreviousValues
}

input HarvestWindowSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [HarvestWindowSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [HarvestWindowSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [HarvestWindowSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: HarvestWindowWhereInput
}

input HarvestWindowUpdateDataInput {
  from: DateTime
  to: DateTime
}

input HarvestWindowUpdateInput {
  from: DateTime
  to: DateTime
}

input HarvestWindowUpdateOneRequiredInput {
  create: HarvestWindowCreateInput
  update: HarvestWindowUpdateDataInput
  upsert: HarvestWindowUpsertNestedInput
}

input HarvestWindowUpsertNestedInput {
  update: HarvestWindowUpdateDataInput!
  create: HarvestWindowCreateInput!
}

input HarvestWindowWhereInput {
  """Logical AND on all given filters."""
  AND: [HarvestWindowWhereInput!]

  """Logical OR on all given filters."""
  OR: [HarvestWindowWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [HarvestWindowWhereInput!]
  from: DateTime

  """All values that are not equal to given value."""
  from_not: DateTime

  """All values that are contained in given list."""
  from_in: [DateTime!]

  """All values that are not contained in given list."""
  from_not_in: [DateTime!]

  """All values less than the given value."""
  from_lt: DateTime

  """All values less than or equal the given value."""
  from_lte: DateTime

  """All values greater than the given value."""
  from_gt: DateTime

  """All values greater than or equal the given value."""
  from_gte: DateTime
  to: DateTime

  """All values that are not equal to given value."""
  to_not: DateTime

  """All values that are contained in given list."""
  to_in: [DateTime!]

  """All values that are not contained in given list."""
  to_not_in: [DateTime!]

  """All values less than the given value."""
  to_lt: DateTime

  """All values less than or equal the given value."""
  to_lte: DateTime

  """All values greater than the given value."""
  to_gt: DateTime

  """All values greater than or equal the given value."""
  to_gte: DateTime
}

type Location {
  lat: Float!
  lng: Float!
}

"""A connection to a list of items."""
type LocationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LocationEdge]!
  aggregate: AggregateLocation!
}

input LocationCreateInput {
  lat: Float!
  lng: Float!
}

input LocationCreateOneInput {
  create: LocationCreateInput
}

"""An edge in a connection."""
type LocationEdge {
  """The item at the end of the edge."""
  node: Location!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LocationOrderByInput {
  lat_ASC
  lat_DESC
  lng_ASC
  lng_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type LocationPreviousValues {
  lat: Float!
  lng: Float!
}

type LocationSubscriptionPayload {
  mutation: MutationType!
  node: Location
  updatedFields: [String!]
  previousValues: LocationPreviousValues
}

input LocationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LocationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LocationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LocationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LocationWhereInput
}

input LocationUpdateDataInput {
  lat: Float
  lng: Float
}

input LocationUpdateInput {
  lat: Float
  lng: Float
}

input LocationUpdateOneRequiredInput {
  create: LocationCreateInput
  update: LocationUpdateDataInput
  upsert: LocationUpsertNestedInput
}

input LocationUpsertNestedInput {
  update: LocationUpdateDataInput!
  create: LocationCreateInput!
}

input LocationWhereInput {
  """Logical AND on all given filters."""
  AND: [LocationWhereInput!]

  """Logical OR on all given filters."""
  OR: [LocationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LocationWhereInput!]
  lat: Float

  """All values that are not equal to given value."""
  lat_not: Float

  """All values that are contained in given list."""
  lat_in: [Float!]

  """All values that are not contained in given list."""
  lat_not_in: [Float!]

  """All values less than the given value."""
  lat_lt: Float

  """All values less than or equal the given value."""
  lat_lte: Float

  """All values greater than the given value."""
  lat_gt: Float

  """All values greater than or equal the given value."""
  lat_gte: Float
  lng: Float

  """All values that are not equal to given value."""
  lng_not: Float

  """All values that are contained in given list."""
  lng_in: [Float!]

  """All values that are not contained in given list."""
  lng_not_in: [Float!]

  """All values less than the given value."""
  lng_lt: Float

  """All values less than or equal the given value."""
  lng_lte: Float

  """All values greater than the given value."""
  lng_gt: Float

  """All values greater than or equal the given value."""
  lng_gte: Float
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createPost(data: PostCreateInput!): Post!
  createUser(data: UserCreateInput!): User!
  createPersonalDetails(data: PersonalDetailsCreateInput!): PersonalDetails!
  createAddress(data: AddressCreateInput!): Address!
  createFarmingActivities(data: FarmingActivitiesCreateInput!): FarmingActivities!
  createFarm(data: FarmCreateInput!): Farm!
  createCrop(data: CropCreateInput!): Crop!
  create_ProduceTable(data: _ProduceTableCreateInput!): _ProduceTable!
  create_Produce(data: _ProduceCreateInput!): _Produce!
  createHarvestWindow(data: HarvestWindowCreateInput!): HarvestWindow!
  createLocation(data: LocationCreateInput!): Location!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  update_Produce(data: _ProduceUpdateInput!, where: _ProduceWhereUniqueInput!): _Produce
  deletePost(where: PostWhereUniqueInput!): Post
  deleteUser(where: UserWhereUniqueInput!): User
  delete_Produce(where: _ProduceWhereUniqueInput!): _Produce
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsert_Produce(where: _ProduceWhereUniqueInput!, create: _ProduceCreateInput!, update: _ProduceUpdateInput!): _Produce!
  updateManyPosts(data: PostUpdateInput!, where: PostWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyPersonalDetailses(data: PersonalDetailsUpdateInput!, where: PersonalDetailsWhereInput): BatchPayload!
  updateManyAddresses(data: AddressUpdateInput!, where: AddressWhereInput): BatchPayload!
  updateManyFarmingActivitieses(data: FarmingActivitiesUpdateInput!, where: FarmingActivitiesWhereInput): BatchPayload!
  updateManyFarms(data: FarmUpdateInput!, where: FarmWhereInput): BatchPayload!
  updateManyCrops(data: CropUpdateInput!, where: CropWhereInput): BatchPayload!
  updateMany_ProduceTables(data: _ProduceTableUpdateInput!, where: _ProduceTableWhereInput): BatchPayload!
  updateMany_Produces(data: _ProduceUpdateInput!, where: _ProduceWhereInput): BatchPayload!
  updateManyHarvestWindows(data: HarvestWindowUpdateInput!, where: HarvestWindowWhereInput): BatchPayload!
  updateManyLocations(data: LocationUpdateInput!, where: LocationWhereInput): BatchPayload!
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyPersonalDetailses(where: PersonalDetailsWhereInput): BatchPayload!
  deleteManyAddresses(where: AddressWhereInput): BatchPayload!
  deleteManyFarmingActivitieses(where: FarmingActivitiesWhereInput): BatchPayload!
  deleteManyFarms(where: FarmWhereInput): BatchPayload!
  deleteManyCrops(where: CropWhereInput): BatchPayload!
  deleteMany_ProduceTables(where: _ProduceTableWhereInput): BatchPayload!
  deleteMany_Produces(where: _ProduceWhereInput): BatchPayload!
  deleteManyHarvestWindows(where: HarvestWindowWhereInput): BatchPayload!
  deleteManyLocations(where: LocationWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type PersonalDetails {
  lastName: String
  cell: String
  landLine: String
  idSA: String
  person: User!
}

"""A connection to a list of items."""
type PersonalDetailsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PersonalDetailsEdge]!
  aggregate: AggregatePersonalDetails!
}

input PersonalDetailsCreateInput {
  lastName: String
  cell: String
  landLine: String
  idSA: String
  person: UserCreateOneWithoutPersonalDetailsInput!
}

input PersonalDetailsCreateOneWithoutPersonInput {
  create: PersonalDetailsCreateWithoutPersonInput
}

input PersonalDetailsCreateWithoutPersonInput {
  lastName: String
  cell: String
  landLine: String
  idSA: String
}

"""An edge in a connection."""
type PersonalDetailsEdge {
  """The item at the end of the edge."""
  node: PersonalDetails!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PersonalDetailsOrderByInput {
  lastName_ASC
  lastName_DESC
  cell_ASC
  cell_DESC
  landLine_ASC
  landLine_DESC
  idSA_ASC
  idSA_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PersonalDetailsPreviousValues {
  lastName: String
  cell: String
  landLine: String
  idSA: String
}

type PersonalDetailsSubscriptionPayload {
  mutation: MutationType!
  node: PersonalDetails
  updatedFields: [String!]
  previousValues: PersonalDetailsPreviousValues
}

input PersonalDetailsSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PersonalDetailsSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PersonalDetailsSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PersonalDetailsSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PersonalDetailsWhereInput
}

input PersonalDetailsUpdateInput {
  lastName: String
  cell: String
  landLine: String
  idSA: String
  person: UserUpdateOneRequiredWithoutPersonalDetailsInput
}

input PersonalDetailsUpdateOneWithoutPersonInput {
  create: PersonalDetailsCreateWithoutPersonInput
  disconnect: Boolean
  delete: Boolean
  update: PersonalDetailsUpdateWithoutPersonDataInput
  upsert: PersonalDetailsUpsertWithoutPersonInput
}

input PersonalDetailsUpdateWithoutPersonDataInput {
  lastName: String
  cell: String
  landLine: String
  idSA: String
}

input PersonalDetailsUpsertWithoutPersonInput {
  update: PersonalDetailsUpdateWithoutPersonDataInput!
  create: PersonalDetailsCreateWithoutPersonInput!
}

input PersonalDetailsWhereInput {
  """Logical AND on all given filters."""
  AND: [PersonalDetailsWhereInput!]

  """Logical OR on all given filters."""
  OR: [PersonalDetailsWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PersonalDetailsWhereInput!]
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  cell: String

  """All values that are not equal to given value."""
  cell_not: String

  """All values that are contained in given list."""
  cell_in: [String!]

  """All values that are not contained in given list."""
  cell_not_in: [String!]

  """All values less than the given value."""
  cell_lt: String

  """All values less than or equal the given value."""
  cell_lte: String

  """All values greater than the given value."""
  cell_gt: String

  """All values greater than or equal the given value."""
  cell_gte: String

  """All values containing the given string."""
  cell_contains: String

  """All values not containing the given string."""
  cell_not_contains: String

  """All values starting with the given string."""
  cell_starts_with: String

  """All values not starting with the given string."""
  cell_not_starts_with: String

  """All values ending with the given string."""
  cell_ends_with: String

  """All values not ending with the given string."""
  cell_not_ends_with: String
  landLine: String

  """All values that are not equal to given value."""
  landLine_not: String

  """All values that are contained in given list."""
  landLine_in: [String!]

  """All values that are not contained in given list."""
  landLine_not_in: [String!]

  """All values less than the given value."""
  landLine_lt: String

  """All values less than or equal the given value."""
  landLine_lte: String

  """All values greater than the given value."""
  landLine_gt: String

  """All values greater than or equal the given value."""
  landLine_gte: String

  """All values containing the given string."""
  landLine_contains: String

  """All values not containing the given string."""
  landLine_not_contains: String

  """All values starting with the given string."""
  landLine_starts_with: String

  """All values not starting with the given string."""
  landLine_not_starts_with: String

  """All values ending with the given string."""
  landLine_ends_with: String

  """All values not ending with the given string."""
  landLine_not_ends_with: String
  idSA: String

  """All values that are not equal to given value."""
  idSA_not: String

  """All values that are contained in given list."""
  idSA_in: [String!]

  """All values that are not contained in given list."""
  idSA_not_in: [String!]

  """All values less than the given value."""
  idSA_lt: String

  """All values less than or equal the given value."""
  idSA_lte: String

  """All values greater than the given value."""
  idSA_gt: String

  """All values greater than or equal the given value."""
  idSA_gte: String

  """All values containing the given string."""
  idSA_contains: String

  """All values not containing the given string."""
  idSA_not_contains: String

  """All values starting with the given string."""
  idSA_starts_with: String

  """All values not starting with the given string."""
  idSA_not_starts_with: String

  """All values ending with the given string."""
  idSA_ends_with: String

  """All values not ending with the given string."""
  idSA_not_ends_with: String
  person: UserWhereInput
}

type Post implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  isPublished: Boolean!
  title: String!
  text: String!
  author: User!
}

"""A connection to a list of items."""
type PostConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  isPublished: Boolean
  title: String!
  text: String!
  author: UserCreateOneWithoutPostsInput!
}

input PostCreateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateWithoutAuthorInput {
  isPublished: Boolean
  title: String!
  text: String!
}

"""An edge in a connection."""
type PostEdge {
  """The item at the end of the edge."""
  node: Post!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  isPublished_ASC
  isPublished_DESC
  title_ASC
  title_DESC
  text_ASC
  text_DESC
}

type PostPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  isPublished: Boolean!
  title: String!
  text: String!
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PostSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PostSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PostSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PostWhereInput
}

input PostUpdateInput {
  isPublished: Boolean
  title: String
  text: String
  author: UserUpdateOneRequiredWithoutPostsInput
}

input PostUpdateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connect: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  delete: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput!]
}

input PostUpdateWithoutAuthorDataInput {
  isPublished: Boolean
  title: String
  text: String
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutAuthorDataInput!
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutAuthorDataInput!
  create: PostCreateWithoutAuthorInput!
}

input PostWhereInput {
  """Logical AND on all given filters."""
  AND: [PostWhereInput!]

  """Logical OR on all given filters."""
  OR: [PostWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PostWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  isPublished: Boolean

  """All values that are not equal to given value."""
  isPublished_not: Boolean
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  author: UserWhereInput
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  personalDetailses(where: PersonalDetailsWhereInput, orderBy: PersonalDetailsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PersonalDetails]!
  addresses(where: AddressWhereInput, orderBy: AddressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Address]!
  farmingActivitieses(where: FarmingActivitiesWhereInput, orderBy: FarmingActivitiesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FarmingActivities]!
  farms(where: FarmWhereInput, orderBy: FarmOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Farm]!
  crops(where: CropWhereInput, orderBy: CropOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Crop]!
  _ProduceTables(where: _ProduceTableWhereInput, orderBy: _ProduceTableOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [_ProduceTable]!
  _Produces(where: _ProduceWhereInput, orderBy: _ProduceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [_Produce]!
  harvestWindows(where: HarvestWindowWhereInput, orderBy: HarvestWindowOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [HarvestWindow]!
  locations(where: LocationWhereInput, orderBy: LocationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Location]!
  post(where: PostWhereUniqueInput!): Post
  user(where: UserWhereUniqueInput!): User
  _Produce(where: _ProduceWhereUniqueInput!): _Produce
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  personalDetailsesConnection(where: PersonalDetailsWhereInput, orderBy: PersonalDetailsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PersonalDetailsConnection!
  addressesConnection(where: AddressWhereInput, orderBy: AddressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AddressConnection!
  farmingActivitiesesConnection(where: FarmingActivitiesWhereInput, orderBy: FarmingActivitiesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FarmingActivitiesConnection!
  farmsConnection(where: FarmWhereInput, orderBy: FarmOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FarmConnection!
  cropsConnection(where: CropWhereInput, orderBy: CropOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CropConnection!
  _ProduceTablesConnection(where: _ProduceTableWhereInput, orderBy: _ProduceTableOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): _ProduceTableConnection!
  _ProducesConnection(where: _ProduceWhereInput, orderBy: _ProduceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): _ProduceConnection!
  harvestWindowsConnection(where: HarvestWindowWhereInput, orderBy: HarvestWindowOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): HarvestWindowConnection!
  locationsConnection(where: LocationWhereInput, orderBy: LocationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LocationConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

enum Role {
  ADMIN
  CUSTOMER
  FARMER
}

type Subscription {
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  personalDetails(where: PersonalDetailsSubscriptionWhereInput): PersonalDetailsSubscriptionPayload
  address(where: AddressSubscriptionWhereInput): AddressSubscriptionPayload
  farmingActivities(where: FarmingActivitiesSubscriptionWhereInput): FarmingActivitiesSubscriptionPayload
  farm(where: FarmSubscriptionWhereInput): FarmSubscriptionPayload
  crop(where: CropSubscriptionWhereInput): CropSubscriptionPayload
  _ProduceTable(where: _ProduceTableSubscriptionWhereInput): _ProduceTableSubscriptionPayload
  _Produce(where: _ProduceSubscriptionWhereInput): _ProduceSubscriptionPayload
  harvestWindow(where: HarvestWindowSubscriptionWhereInput): HarvestWindowSubscriptionPayload
  location(where: LocationSubscriptionWhereInput): LocationSubscriptionPayload
}

type User implements Node {
  id: ID!
  email: String!
  password: String!
  name: String!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  personalDetails: PersonalDetails
  address: Address
  farmingActivities: FarmingActivities
  role: Role
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  password: String!
  name: String!
  role: Role
  posts: PostCreateManyWithoutAuthorInput
  personalDetails: PersonalDetailsCreateOneWithoutPersonInput
  address: AddressCreateOneWithoutResidentInput
  farmingActivities: FarmingActivitiesCreateOneWithoutFarmerInput
}

input UserCreateOneWithoutAddressInput {
  create: UserCreateWithoutAddressInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutFarmingActivitiesInput {
  create: UserCreateWithoutFarmingActivitiesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPersonalDetailsInput {
  create: UserCreateWithoutPersonalDetailsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutAddressInput {
  email: String!
  password: String!
  name: String!
  role: Role
  posts: PostCreateManyWithoutAuthorInput
  personalDetails: PersonalDetailsCreateOneWithoutPersonInput
  farmingActivities: FarmingActivitiesCreateOneWithoutFarmerInput
}

input UserCreateWithoutFarmingActivitiesInput {
  email: String!
  password: String!
  name: String!
  role: Role
  posts: PostCreateManyWithoutAuthorInput
  personalDetails: PersonalDetailsCreateOneWithoutPersonInput
  address: AddressCreateOneWithoutResidentInput
}

input UserCreateWithoutPersonalDetailsInput {
  email: String!
  password: String!
  name: String!
  role: Role
  posts: PostCreateManyWithoutAuthorInput
  address: AddressCreateOneWithoutResidentInput
  farmingActivities: FarmingActivitiesCreateOneWithoutFarmerInput
}

input UserCreateWithoutPostsInput {
  email: String!
  password: String!
  name: String!
  role: Role
  personalDetails: PersonalDetailsCreateOneWithoutPersonInput
  address: AddressCreateOneWithoutResidentInput
  farmingActivities: FarmingActivitiesCreateOneWithoutFarmerInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  name_ASC
  name_DESC
  role_ASC
  role_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
  name: String!
  role: Role
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  email: String
  password: String
  name: String
  role: Role
  posts: PostUpdateManyWithoutAuthorInput
  personalDetails: PersonalDetailsUpdateOneWithoutPersonInput
  address: AddressUpdateOneWithoutResidentInput
  farmingActivities: FarmingActivitiesUpdateOneWithoutFarmerInput
}

input UserUpdateOneRequiredWithoutAddressInput {
  create: UserCreateWithoutAddressInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutAddressDataInput
  upsert: UserUpsertWithoutAddressInput
}

input UserUpdateOneRequiredWithoutFarmingActivitiesInput {
  create: UserCreateWithoutFarmingActivitiesInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutFarmingActivitiesDataInput
  upsert: UserUpsertWithoutFarmingActivitiesInput
}

input UserUpdateOneRequiredWithoutPersonalDetailsInput {
  create: UserCreateWithoutPersonalDetailsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutPersonalDetailsDataInput
  upsert: UserUpsertWithoutPersonalDetailsInput
}

input UserUpdateOneRequiredWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutPostsDataInput
  upsert: UserUpsertWithoutPostsInput
}

input UserUpdateWithoutAddressDataInput {
  email: String
  password: String
  name: String
  role: Role
  posts: PostUpdateManyWithoutAuthorInput
  personalDetails: PersonalDetailsUpdateOneWithoutPersonInput
  farmingActivities: FarmingActivitiesUpdateOneWithoutFarmerInput
}

input UserUpdateWithoutFarmingActivitiesDataInput {
  email: String
  password: String
  name: String
  role: Role
  posts: PostUpdateManyWithoutAuthorInput
  personalDetails: PersonalDetailsUpdateOneWithoutPersonInput
  address: AddressUpdateOneWithoutResidentInput
}

input UserUpdateWithoutPersonalDetailsDataInput {
  email: String
  password: String
  name: String
  role: Role
  posts: PostUpdateManyWithoutAuthorInput
  address: AddressUpdateOneWithoutResidentInput
  farmingActivities: FarmingActivitiesUpdateOneWithoutFarmerInput
}

input UserUpdateWithoutPostsDataInput {
  email: String
  password: String
  name: String
  role: Role
  personalDetails: PersonalDetailsUpdateOneWithoutPersonInput
  address: AddressUpdateOneWithoutResidentInput
  farmingActivities: FarmingActivitiesUpdateOneWithoutFarmerInput
}

input UserUpsertWithoutAddressInput {
  update: UserUpdateWithoutAddressDataInput!
  create: UserCreateWithoutAddressInput!
}

input UserUpsertWithoutFarmingActivitiesInput {
  update: UserUpdateWithoutFarmingActivitiesDataInput!
  create: UserCreateWithoutFarmingActivitiesInput!
}

input UserUpsertWithoutPersonalDetailsInput {
  update: UserUpdateWithoutPersonalDetailsDataInput!
  create: UserCreateWithoutPersonalDetailsInput!
}

input UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput!
  create: UserCreateWithoutPostsInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  role: Role

  """All values that are not equal to given value."""
  role_not: Role

  """All values that are contained in given list."""
  role_in: [Role!]

  """All values that are not contained in given list."""
  role_not_in: [Role!]
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  personalDetails: PersonalDetailsWhereInput
  address: AddressWhereInput
  farmingActivities: FarmingActivitiesWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
